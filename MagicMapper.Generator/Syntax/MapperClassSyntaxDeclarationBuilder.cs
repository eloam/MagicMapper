using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace MagicMapper.Generator.Syntax;

public class MapperClassSyntaxDeclarationBuilder : ISyntaxBuilder
{
    private readonly string _namespace;
    private readonly string _className;
    private IList<UsingDirectiveSyntax> _usings = [];
    private IList<MethodDeclarationSyntax> _methods = [];
    
    public string Namespace => _namespace;
    public string Name => _className;

    public MapperClassSyntaxDeclarationBuilder(string ns, string className)
    {
        _namespace = ns;
        _className = className;
    }

    public void AddMapperMethod(IMethodSymbol methodSymbol)
    {
        // Add using directives for the method parameters
        methodSymbol.Parameters.Select(parameterSymbol => parameterSymbol.Type.ContainingNamespace)
            .ToList()
            .ForEach(TryAddUsingDirective);

        // Add using directive for the method return type
        ParameterSyntax[] parameters = methodSymbol.Parameters.Select(parameterSymbol => SyntaxFactory
                .Parameter(SyntaxFactory.Identifier(parameterSymbol.Name))
                .WithType(SyntaxFactory.ParseTypeName(parameterSymbol.Type.Name)))
            .ToArray();

        // Create the method declaration
        MethodDeclarationSyntax methodDeclaration = SyntaxFactory
            .MethodDeclaration(SyntaxFactory.ParseTypeName(methodSymbol.ReturnType.Name), methodSymbol.Name)
            .WithModifiers(SyntaxTokenList.Create(SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
            .AddParameterListParameters(parameters)
            .WithBody(SyntaxFactory.Block(MapObject(methodSymbol)))
            .NormalizeWhitespace();

        _methods.Add(methodDeclaration);
    }

    private StatementSyntax MapObject(IMethodSymbol methodSymbol)
    {
        IParameterSymbol inputType = methodSymbol.Parameters.FirstOrDefault()
                                     ?? throw new Exception("No parameter found");
        ITypeSymbol outputType = methodSymbol.ReturnType;

        IdentifierNameSyntax inputIdentifier = SyntaxFactory.IdentifierName(inputType.Name);

        AssignmentExpressionSyntax?[] assignments = outputType.GetMembers()
            .OfType<IPropertySymbol>()
            .Where(outputProp => outputProp.SetMethod != null)
            .Select(outputProp =>
            {
                var inputProperty = inputType.Type.GetMembers().OfType<IPropertySymbol>().FirstOrDefault(p => p.Name == outputProp.Name);
                if (inputProperty != null)
                {
                    return SyntaxFactory.AssignmentExpression(
                        SyntaxKind.SimpleAssignmentExpression,
                        SyntaxFactory.IdentifierName(outputProp.Name),
                        SyntaxFactory.MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            inputIdentifier,
                            SyntaxFactory.IdentifierName(outputProp.Name)
                        )
                    );
                }

                return null;
            })
            .Where(assignment => assignment != null)
            .ToArray();

        ObjectCreationExpressionSyntax objectCreation = SyntaxFactory.ObjectCreationExpression(SyntaxFactory.ParseTypeName(outputType.Name))
            .WithInitializer(SyntaxFactory.InitializerExpression(SyntaxKind.ObjectInitializerExpression,
                SyntaxFactory.SeparatedList<ExpressionSyntax>((assignments ?? throw new Exception("TODO"))!)));
        
        return SyntaxFactory.ReturnStatement(objectCreation);
    }

    private void TryAddUsingDirective(INamespaceSymbol namespaceSymbol)
    {
        UsingDirectiveSyntax usingDirective = SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(namespaceSymbol.Name))
            .NormalizeWhitespace();

        _usings.Add(usingDirective);
    }

    public string Build()
    {
        CompilationUnitSyntax compilationUnit = SyntaxFactory.CompilationUnit()
            .WithTrailingTrivia(SyntaxFactory.Comment("// <auto-generated />"))
            .AddUsings(_usings.ToArray())
            .AddMembers(
                SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(_namespace))
                    .AddMembers(
                        SyntaxFactory.ClassDeclaration(_className)
                            .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                            .AddMembers(_methods.ToArray()! ?? throw new Exception("TODO"))
                    )
            )
            .NormalizeWhitespace();

        return compilationUnit.ToFullString();
    }

    public override int GetHashCode()
    {
        return _namespace.GetHashCode() + _className.GetHashCode();
    }
}